// ---------------------------------------------------------------- //
//  Kerning Pairs Visualizator
//  2005 Martin Bereciartua - email (at) m-i-b.com.ar
//  http://www.m-i-b.com.ar/
// ---------------------------------------------------------------- //
//
//  This source is released under the creative commons license 
//  http://creativecommons.org/licenses/by-nc-sa/1.0/
//
//  Thanks to:
//  Ben Fry and Karsten Schmidt for inspiration
//
// ---------------------------------------------------------------- //
//  Made with Processing (Beta) v091
// ---------------------------------------------------------------- //

//Min and Max colors
int _rMin = 111; int _gMin = 175; int _bMin = 223;
int _rMax = 198; int _gMax = 220; int _bMax = 240;

PFont font, font1, font2, font3, font4;
String par_actual = "";               // valor actual del escaneo del texto
String[] lines;                       // lineas del texto escaneado
int arrastrando = -1;

int pares_totales = 0;
float k_total;

int espacio_abajo;
int espacio_arriba;
int espacio_derecha;
int espacio_izquierda;
String layout_actual = "reducido";
String visual_mode = "lineal";
int burbujas_maximas = 99;
int burbujas_graficadas = 0;
float minSize = 10;
int maxCycles = 500;
int currentCycle = 0;
int clickedX = 0;
int clickedY = 0;

Ball[] balls = new Ball[0];
float grav = 4.0;                    // Gravedad
float b = 0.85;                       // Rebote
float f = 0.90;                       // Friccion

color ColorLineasGrales = color(200);
color ColorAcento = color(255, 102, 0);
color ColorAcentoCompanion = color(255, 180, 0);

int lapso_refresh = 1;               // cada cuantos frames se renueva la info del listado
int timer_interno = 0;
boolean resorte_activado = false;
boolean show_info = false;
boolean llenar_burbujas = true;
boolean hay_gravedad = true;
boolean frozen = false;
boolean renderCompleted = false;
boolean debugMode = false;
booloean autoFreeze = false;
boolean dragEnabled = true;
boolean clicked = false; 

void setup() {

  balls = new Ball[0];
  currentBall = 0;
  renderCompleted = false;

  size($.getDocWidth(), $.getDocHeight());

  background(255);
  smooth();
  frameRate(24);

  font = loadFont("Swiss721BT-Bold-48.vlw");
  font1 = loadFont("Swiss721BT-BlackCondensed-25.vlw");
  font2 = loadFont("Swiss721BT-BoldCondensed-18.vlw");
  font3 = loadFont("Swiss721BT-BoldCondensed-14.vlw");
  font4 = loadFont("Swiss721BT-RomanCondensed-18.vlw");
  
  //calcularKtotal();
  
  layout( font1, font2, font3 );
  
  setupBubbles();

  unFreeze();

}

void draw() {
  
	if(autoFreeze) {
		if(currentCycle >= maxCycles) {
		frozen = true;
		}

	}


	  
    background(240,245,255);
	cursor(ARROW);    
    //Render bubbles at their current position
	for ( int i=burbujas_maximas; i>=0; i-- ) {
		if ( i < balls.length ) {
			if(!frozen) {
				currentCycle++;
				if ( hay_gravedad ) balls[i].fall();
				if ( resorte_activado ) balls[i].spring();
				balls[i].bounce();
				balls[i].collide();
				balls[i].move();
				balls[i].encima();      
			}
			balls[i].display();
		}
	}

    layout( font1, font2, font3 );
	  
	if(debugMode) {
		displayDebugInfo();
   }
}

void displayDebugInfo() {
	textFont(font, 12);
	textAlign(LEFT);
	fill(120);
	text("C: " + currentCycle +" F: " + frameCount + " Auto Freeze: " + autoFreeze,espacio_izquierda,height - 30);
}

void setupBubbles () {
//Create bubbles array from input data
		
		
		addBall(0, "Select Table", 40, 10, width/3,height/3,0,0);
		addBall(1, "Sample Table", 25, 15, width,height*2/3,0,0);
		addBall(2, "Settings", 10, 20, width/3,height*3/4,0,-0);

		for(int i = 3; i<13; i++) {
			addBall(i, "", random(0,1), random(1,10), -1,-1,-1,-1);
		}

		pares_totales = 0;
		burbujas_graficadas = 0;
		for ( int i=burbujas_maximas; i>=0; i-- ) {
		  if ( i < balls.length ) {
			pares_totales += balls[i].sizeValue;
			burbujas_graficadas++;
		  }
		}

		//Calculate bubble sizes
		calcularKtotal();
		for ( int i=0; i<balls.length; i++ ) {
		  float kprima = ( k_total * balls[i].sizeValue ) / pares_totales;
		  balls[i].ka = kprima;
		  balls[i].r = sqrt( ( ( kprima ) / PI ) );
		  if(balls[i].r < minSize) balls[i].r = minSize; //Don't allow bubbles to be too small
		}

		ordenarArrays();
}

void graficando() { // funcion para graficar los top 20

  float tamanio = 45;
  int altura = 140;
  int alpha_value = 255;
  
  for (int i=0; i < 20 && i < balls.length ; i++) {
  
    textFont(font, tamanio);
    textAlign(CENTER);
    fill(0, 102, 153, alpha_value); 
    text(balls[i].nombre, width - 50, altura);
    
    tamanio = tamanio * 0.94;
    altura += tamanio-5;
    alpha_value -= 10;
  
  }
  
}

void layout( PFont font1, PFont font2, PFont font3 ) {

    espacio_abajo = 10;
    espacio_arriba = 60;
    espacio_derecha = 10;
    espacio_izquierda = 10;
   
  textFont(font1, width*.05);
  textAlign(CENTER);
  fill(_rMin, _gMin, _bMin);
 text("Select an option below:", width/2, width*.06);
 
}


void sumarKP( String newKP ) {
  int kp_encontrado = 0;
  // buscar kp a sumar en array existente
  for (int i=0; i < balls.length; i++) { 
    if ( balls[i].nombre == newKP ) { // si encuentro el kp le sumo una ocurrencia
      kp_encontrado = 1;
      balls[i].sizeValue++;
    } 
    if ( kp_encontrado == 1 ) break;
  } 
  
  // si no lo encuentro lo creo
  if ( kp_encontrado == 0 ) nuevoKP( newKP );

}

void nuevoKP( String newx ) {  
  
  calcularKtotal();
  float ka;
  if ( balls.length > 0 ) ka = k_total / balls.length;
  else ka = k_total;
  Ball[] tempBall = new Ball( newx, ka, newx, 1 );
  balls[balls.length] = tempBall;

}

void addBall( int id, String name, float size, float color, int x, int y, int vx, int vy) {  
  
  calcularKtotal();
  float ka;
  if ( balls.length > 0 ) ka = k_total / balls.length;
  else ka = k_total;
  Ball[] tempBall = new Ball( id, ka, name, size, color, x, y, vx, vy);
  balls[balls.length] = tempBall;

}

void ordenarArrays() {
  
  Ball[] temp_sizeValue = new Ball[balls.length];
  temp_sizeValue = balls;
  
  Ball temp;
  int i, j;
      for (i = temp_sizeValue.length-1; i >= 0; i--)
         for (j = 0; j < i; j++)
            if (temp_sizeValue[j].sizeValue < temp_sizeValue[j + 1].sizeValue) {
               temp = temp_sizeValue[j];
               temp_sizeValue[j] = temp_sizeValue[j + 1];
               temp_sizeValue[j + 1] = temp;
            }

  balls = temp_sizeValue;
  
}

void calcularKtotal () {

  // encontrar un valor de k (superficie a ocupar) que concuerde con
  // la cantidad de burbujas a dibujar (evitar que se superpongan)
  
  float alto = height-espacio_arriba-espacio_abajo;
  float ancho = width-espacio_izquierda-espacio_derecha;
  
  if ( burbujas_graficadas <= 1 ) {
    if ( alto < ancho ) k_total = PI*pow(alto/2,2)*0.8;
    else k_total = PI*pow(ancho/2,2)*0.8;
  }
  else if ( burbujas_graficadas > 1 && burbujas_graficadas <= 6 ) k_total = ancho * alto * 0.65;
  else if ( burbujas_graficadas > 6 && burbujas_graficadas <= 20 ) k_total = ancho * alto * 0.75;
  else if ( burbujas_graficadas > 20 && burbujas_graficadas <= 50 ) k_total = ancho * alto * 0.80;
  else if ( burbujas_graficadas > 50 && burbujas_graficadas <= 200 ) k_total = ancho * alto * 0.86;
  else if ( burbujas_graficadas > 200 ) k_total = ancho * alto * 0.92;

}


void keyPressed() {


    if(keyCode<256) keyboard.press(keyCode);

    if (key == 'm' || key == 'M') { // viendo mas burbujas
      if ( burbujas_maximas == 0 ) burbujas_maximas = 4;
      else if ( burbujas_maximas == 4 ) burbujas_maximas = 19;
      else if ( burbujas_maximas == 19 ) burbujas_maximas = 49;
      else if ( burbujas_maximas == 49 ) burbujas_maximas = 99;
    }
    if (key == 'l' || key == 'L') { // viendo menos burbujas
      if ( burbujas_maximas == 99 ) burbujas_maximas = 49;
      else if ( burbujas_maximas == 49 ) burbujas_maximas = 19;
      else if ( burbujas_maximas == 19 ) burbujas_maximas = 4;
    }
    if (key == 'a' || key == 'A') { // activando resortes
      if ( resorte_activado == true ) resorte_activado = false;
      else if ( resorte_activado == false ) resorte_activado = true;
    }
    if (key == 'i' || key == 'I') { // mostrar info en burbujas
      if ( show_info == true ) show_info = false;
      else if ( show_info == false ) show_info = true;
    }
    if (key == 't' || key == 'T') { // mostrar burbujas opacas
      if ( llenar_burbujas == true ) llenar_burbujas = false;
      else if ( llenar_burbujas == false ) llenar_burbujas = true;
    }
    if (key == 'd' || key == 'D') { // Show debug info
      if ( debugMode == true ) debugMode = false;
      else if ( debugMode == false ) debugMode = true;
    }
    if (key == 'z' || key == 'Z') { // Automatically freeze after maxCycles
      if ( autoFreeze == true ) {
		autoFreeze = false;
		}
      else if ( autoFreeze == false ) {
		autoFreeze = true;
		}
    }

    if (key == 'f' || key == 'F') { // cambiar modo de layout
      if ( frozen == true ) { 
		frozen = false;
		}
      else if ( frozen == false) {
	   frozen = true;
	   }
    }

    if ( keyboard.pressed(UP) || keyboard.pressed(DOWN) || keyboard.pressed(LEFT) || keyboard.pressed(RIGHT) ) { // aplicar gravedad
      hay_gravedad = true;
    } else hay_gravedad = false;

    if (key == 's' || key == 'S') { // shaking
      for ( int i=0; i<balls.length; i++ ) {
        balls[i].x += random(-10,10);
        balls[i].y += random(-10,10);
      }
    }
    if (key == 'r' || key == 'R') { // redistribuyendo
      for ( int i=0; i<balls.length; i++ ) {
        balls[i].x = random(balls[i].r+espacio_izquierda, width-espacio_derecha-balls[i].r);
        balls[i].y = random(balls[i].r+espacio_arriba, height-espacio_abajo-balls[i].r);
      }
    }
  
}

void keyReleased() { 
  
  if(keyCode<256) keyboard.release(keyCode);
  
}

void mouseReleased() { 
  
  arrastrando = -1;
  
}

void mouseMoved() { 
  
 unFreeze();
  
}


class Ball {

  float r;
  float m;
  
  float x;
  float y;
  
  float vx;
  float vy;
  
  int id;
  float ka;
  
  String nombre;
  float sizeValue;
  float colorValue;
  
  // Spring
  float mass;                                       // Masa
  float kspring;                                    // Constante de resorte
  float damp;                                       // Damping 
  float rest_posx = ( ( width-espacio_derecha ) / 2 ) + espacio_izquierda / 2;
  float rest_posy = ( ( height-espacio_abajo ) / 2 ) + espacio_derecha / 2;
  float accel = 0;                                  // Aceleracion 
  float force = 0;                                  // Fuerza
  
  boolean estamos_encima;
  
  Ball( int ID, float KA, String NOMBRE, float SV, float CV, int X, int Y, VX, VY) {
  
    ka = KA;
    r = sqrt( ka / PI );
    m = r;

	if(X>=0) x=X; else x = random(r+espacio_izquierda,width-espacio_derecha-r);
	if(Y>=0) y=Y; else y = random(r+espacio_arriba,height-espacio_abajo-r);
	if(VX>=0) vx=VX; else vx = random(-3,3);
	if(VY>=0) vy=VY; else vy = random(-3,3);

	id = ID;
    nombre = NOMBRE;
    sizeValue = SV;
	colorValue= CV;
    estamos_encima = false;
    
    mass = sqrt( ( ( (PI*pow((height-espacio_abajo-espacio_arriba)/2,2)*0.8) / 2000 ) / PI ) );
    damp = 0.85;
    kspring = 0.01;
  }
  
  void fall() {
  
    if ( keyboard.pressed(UP) ) vy -= grav;
    if ( keyboard.pressed(DOWN) ) vy += grav;
    if ( keyboard.pressed(LEFT) ) vx -= grav;
    if ( keyboard.pressed(RIGHT) ) vx += grav;
  }
  
  void spring() {
  
    rest_posx = ( ( width-espacio_derecha ) / 2 ) + espacio_izquierda / 2;
    rest_posy = ( ( height-espacio_abajo ) / 2 ) + espacio_derecha / 2; 

    if ( balls.length > 0 && ( balls[0].sizeValue - balls[burbujas_graficadas-1].sizeValue ) > 0 ) {
      float A = balls[0].sizeValue;                        // maximo original
      float C = sizeValue;                                 // valor original
      float B = balls[burbujas_graficadas-1].sizeValue;    // minimo original
      float D = 5;                                           // nuevo maximo
      float E;                                               // nuevo minimo
      if ( burbujas_graficadas > 20 ) E = 2;
      else E = 0;
      kspring = -1 * ( ( ( A - C ) / ( A - B ) ) * ( D - E ) - D );
    }
    if ( burbujas_graficadas == 1 ) kspring = 4;
    
    //mass = r;
    
    force = -kspring * (y - rest_posy);    // f=-ky 
    accel = force / mass;                  // Asignar aceleracion
    vy = damp * (vy + accel);              // Definir velocidad 
    //y += vy;

    force = -kspring * (x - rest_posx);    // f=-ky 
    accel = force / mass;                  // Asignar aceleracion
    vx = damp * (vx + accel);              // Definir velocidad 
    //x += vx;
  }
  
  void bounce() {
  
    if ( y + vy + r > height-espacio_abajo ) {
    
      y = height-espacio_abajo - r;
      vx *= f;
      vy *= -b;
    }
    if ( y + vy - r < espacio_arriba ) {
    
      y = r+espacio_arriba;
      vx *= f;
      vy *= -b;
    }
    if ( x + vx + r > width-espacio_derecha ) {
    
      x = width-espacio_derecha - r;
      vx *= -b;
      vy *= f;
    }
    if ( x + vx - r < espacio_izquierda ) {
    
      x = r+espacio_izquierda;
      vx *= -b;
      vy *= f;
    }
  }
  
  void collide() {
  
    for ( int i=burbujas_maximas; i>=0; i-- ) {
    
      if ( i < balls.length ) {
      
        float X = balls[i].x;
        float Y = balls[i].y;
        float R = balls[i].r;
        float M = balls[i].m;
      
        float deltax = X-x;
        float deltay = Y-y;
        float d = sqrt(pow(deltax,2)+pow(deltay,2));
      
        if ( d < r + R && d > 0 ) {
        
          float dD = r + R - d;
          float theta = atan2(deltay,deltax);
        
          vx += -dD*cos(theta)*M/(m+M);
          vy += -dD*sin(theta)*M/(m+M);
        
          vx *= b;
          vy *= b;
        
        }
      }
    }
  }
  
  void move() {
  
    if ( dragEnabled == true && id >= 3 && estamos_encima && mousePressed && ( arrastrando == -1 || arrastrando == id ) ) {
      x = mouseX;
      y = mouseY;
      vx = 0;
      vy = 0;
      arrastrando = id;
    } else {
      x += vx;
      y += vy;
    }    
  }

	void clickAction() {

		if ( mouseClicked && dist(x, y, clickedX, clickedY) < r ) {
			if(id==0) {
				setBinding();
			}
			if(id==1) {
				insertSampleData();
			}
			if(id==2){
				displaySettings();
			}
	
			clicked = false;
		}
	}

  
  void encima() {
  
    if ( dist(x, y, mouseX, mouseY) < r ) {
	 estamos_encima = true;
	  
	 }

    else {
		 estamos_encima = false;
		 }
  
  }

  String[] generateLabelArray(String source) {
	String[] words = source.split(" ");
	String[] label;

	if(words.length < 2) {
		label = new String[1];
		label[0] = words[0];
	}
	else {
		label = new String[2];
		label[0] = words[0];
		label[1] = words[1];
		if(words.length > 2)
			label[1] += "...";
	}

/*
	String label = words[0];

	if(words[0].length < 15 && words.length > 1)
		label += "\n" + words[1];
	if(words.length > 2)
		label += "...";
*/
	return label;
  }
  
  float[] getMinMaxColorValue() {
	float maxValue = 0;
	float minValue = 0;
	float[] minMax = new float[2];

	if(balls.length > 0 ) minValue = balls[0].colorValue;

	for(int i=0; i<balls.length; i++) {
		if(balls[i].colorValue > maxValue)
			maxValue = balls[i].colorValue;
		if(balls[i].colorValue < minValue)
			minValue = balls[i].colorValue;
	}
	minMax[0] = minValue;
	minMax[1] = maxValue;
	
	return minMax;
  }


  void display() {
  
    float A = balls[0].sizeValue;                        // maximo original
    float B = balls[burbujas_graficadas-1].sizeValue;    // minimo original
    float C = sizeValue;                                 // valor original
    float D;                                               // nuevo maximo
    float E;                                               // nuevo minimo

    float[] minMaxColorValue = getMinMaxColorValue();
	float F = minMaxColorValue[1];                        // maximo original
    float G = minMaxColorValue[0];					    // minimo original
    float H = colorValue;                                 // valor original

	String[] labelArray;
	String label;

    //nuevo_valor = -1 * ( ( ( A - C ) / ( A - B ) ) * ( D - E ) - D );
  
    if ( visual_mode == "lineal" ) {

      if ( llenar_burbujas ) fill(255,255,255);
      else noFill();
      

	  //Calcular los componentes del color de la burbuja
	  int rVal = 0;
	  int gVal = 0;
	  int bVal = 0; 

	  if (F<=G) {
			rVal = _rMin; gVal = _gMin; bVal = _bMin;	
		}
	  else {
			rVal = (H - G) * (_rMax - _rMin) / (F-G) + _rMin;
			gVal = (H - G) * (_gMax - _gMin) / (F-G) + _gMin;
			bVal = (H - G) * (_bMax - _bMin) / (F-G) + _bMin;
		}

	boolean tooDark=false;

	if(rVal <40 && gVal <40 && bVal <40) {
		rVal = 40;
		gVal = 40;
		bVal = 40;
		tooDark = true;
	}


	  if ( estamos_encima ) {		
	
		  if ( llenar_burbujas )
			fill(rVal,gVal,bVal,200);
		  else
			fill(rVal,gVal,bVal,150);
		
		strokeWeight(r/15);

		if(id < 3) cursor(HAND);

	   }
	   else {

		  if ( llenar_burbujas && !tooDark)
			fill(rVal,gVal,bVal);
		  else
			fill(rVal,gVal,bVal,150);


		   strokeWeight(r/20);
  	  
	   }

  
      float lc = -1 * ( ( ( A - C ) / ( A - B ) ) * ( 60 - 200 ) - 60 );
	  if(lc < 150) lc = 150;
      float lcalpha = -1 * ( ( ( A - C ) / ( A - B ) ) * ( 255 - 90 ) - 255 );
      if ( A == B ) lcalpha = 255;
      color local = color( lc );
      stroke( rVal-50,gVal-50,bVal-50 );      

      ellipse(x,y,2*r-r/10,2*r-r/10); 

 
	labelArray = generateLabelArray(nombre);

	//Identify longest element
	int longestIndex = 0;
    for(int i=0; i<labelArray.length; i++){
			if(labelArray[i].length() > labelArray[longestIndex].length())
				longestIndex = i;
		}

      if(labelArray[0].length <= 5)
		float tamanio = ((r*2)/labelArray[longestIndex].length)*1.1;
	else
		float tamanio = ((r*2)/labelArray[longestIndex].length)*1.3;

      textFont(font, tamanio);
      textAlign(CENTER);
      fill(0, 0, 0, 100);
            
      if(labelArray.length > 1) {
			 text(labelArray[0], x, y-tamanio/4);
			 text(labelArray[1], x, y+tamanio);
		 }
		 else
		 {
			text(labelArray[0], x, y+tamanio/3);
		 }
    
      if ( show_info ) {
        float tamanio1 = r*0.2;
        textFont(font, tamanio1);
        fill(0, 0, 0, 100);
        text(str(sizeValue.toFixed(2)), x, y-r+tamanio1*2);
        fill(255, 255, 255, 100);
        text(str(colorValue.toFixed(2)), x, y+r-tamanio1);
      }

	  //Display bubble highlight and shadow
	  fill(255,255,255,30);
	  noStroke();
	  ellipse(x+(r-r/2),y-(r-r/2),r/4,r/4); 

	  fill(0,0,0,15);
	  ellipse(x-(r-r/1.7),y+(r-r/1.7),r/1.25,r/1.25);

	  if(clicked)
		clickAction();

    
    }

  }
}


void unFreeze () {
  if(currentCycle >= maxCycles) currentCycle = 0;
  frozen = false;
}

void mouseClicked() {
	clicked = true;
	clickedX = mouseX;
	clickedY = mouseY;
}


//
// Funcion para dibujar barra de avance
// 23/07/05 :: P&A
//

void barraAvance( int x1, int y1, 
                  int x2, int y2, 
                  float ValParcial, float ValTotal, 
                  color ColorLinea, color ColorRelleno ) {

  float AnchoReal = ( ( ( ValParcial * 100 ) / ValTotal ) * ( x2 - x1 )  ) / 100;

  strokeWeight(1);
  stroke(ColorLinea);
  noFill();
  rectMode(CORNERS); 
  rect(x1, y1, x2, y2);
  
  noStroke();
  fill(ColorRelleno);
  rect(x1, y1, x1+AnchoReal+1, y2+1);

}



Keys keyboard = new Keys();

class Keys { 

  boolean[] k; 
   
  Keys() { 
    k=new boolean[255]; 
    for(int i=0;i<k.length;i++) k[i]=false;  
  } 
 
  void press(int x) { 
    k[x]=true; 
  } 
 
  void release(int x) { 
    k[x]=false; 
  } 
 
  boolean pressed(int x) { 
    return k[x]; 
  } 
 
  void releaseAll() { 
    for(int i=0;i<k.length;i++) k[i]=false;  
  } 
 
  boolean anyPressed() { 
    for(int i=0;i<k.length;i++) if(k[i]==true) return true; 
    return false; 
  } 
}

